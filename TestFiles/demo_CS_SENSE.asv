%demo_CS_SENSE
%-------------------------------------------------------------------
% Locate necessary files
%-------------------------------------------------------------------
addpath('E:\BestProjects\3DSparseSENSE\files\ImageDenoising\')
addpath('E:\BestProjects\3DSparseSENSE\files\SENSE\')
addpath('E:\BestProjects\3DSparseSENSE\files\SensitivityMap\')
addpath('E:\BestProjects\3DSparseSENSE\files\SparseSENSE\')
%-------------------------------------------------------------------
% Define parameters
%-------------------------------------------------------------------

%parameters for Philips SENSE

Par.nPE = 227;
Par.nSL = 115;
Par.Areg = 1e-6;%0.0001;
Par.alpha = 2;
Par.beta = 1;
Par.Kar = 0;
%parameters for sensitivity maps
Par.flagSM = 1;
%parameters for image denoising
Par.aTV = 0.02;
Par.TVtype = 2;
Par.maxItr = 100;       
Par.gamma = 1.0;        
Par.beta = 10;          
Par.relchg_tol = 5e-4;  
Par.normalize = 1;
%parameters for prior information regularized SENSE
Par.priLmd = 0.2; %weight for regularization
Par.Lg = 1.2; %no change at locations where g-factor is smaller than this value
%-------------------------------------------------------------------
% load Data
%-------------------------------------------------------------------
load E:\projects\Self_feedingSENSE\Self_feedingGOSENSE\files\Applications\Hres8ch\Sl100.mat
% Kdata = Kdata(:,1:end-1,:,1:end-1);
Kdata = permute(KdataSl,[1 3 2]);
clear KdataSl
[nPE, nSL, nCH] = size(Kdata);
%-------------------------------------------------------------------
%---Caculate sensitivity maps---
%-------------------------------------------------------------------
LresK = Kdata;
for ch = 1:nCH
    LresImg(:,:,1,ch) = K2Img(LresK(:,:,ch));
end
clear LresK
%calculate sensitivity maps
tic
[SSM,bodycoil,filled_mask]=SM_LresImg(LresImg,Par);
toc



%-------------------------------------------------------------------
% Initial Reconstruction
%-------------------------------------------------------------------
ParK(:,:,1,:) =  Kdata(1:2:nPE,1:2:nSL,:);
bod
Par.nPE = nPE;
tic
[CompI,RecMtx,g_map]=RegPreSENSE(ParK,Phi,SSM, bodycoil,Par);
toc
% CompI = CompI.*Par.Rf;
% [senseMap ] = Interp_RecMtx(SSM ,nPE,nFE);
%-------------------------------------------------------------------
% self-feeding Sparse SENSE
%-------------------------------------------------------------------
tic;[Inew,senseMap]=Self_Sparse_SENSE(CompI,ParK,SSM,g_map,Phi,Par);toc
% addpath('E:\projects\ktGROWL\files\GROWL');
% tic;[Inew,senseMap]=Sparse_GoSENSE(CompI,ParK,SSM,g_map,Phi,Par);toc
%-------------------------------------------------------------------
% Show results
%-------------------------------------------------------------------
real_I = zeros(nPE,nFE);
for ch=1:nCH
    real_I = real_I + K2Img(Kdata(:,:,ch)).*conj(senseMap(:,:,ch));
end
figure;imagesc(abs(Inew)',[0 3]);axis off;axis equal;colormap(gray)
figure;imagesc(abs(CompI)',[0 3]);axis off;axis equal;colormap(gray)
% figure;imagesc(abs(abs(Inew)-abs(real_I))',[0 0.6]);axis off;axis equal;colormap(gray)
% figure;imagesc(abs(T(161:224,201:264)),[0 3]);axis off;axis equal;colormap(gray)
norm(abs(Inew)-abs(real_I),'fro')/norm(real_I,'fro')
norm(abs(CompI)-abs(real_I),'fro')/norm(real_I,'fro')
